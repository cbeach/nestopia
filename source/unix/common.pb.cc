// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace beachc {
namespace deep_thought {
namespace common {
class GameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game> {
  public:
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr url_;
} _Game_default_instance_;
class ShapeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Shape> {
} _Shape_default_instance_;
class PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Player> {
} _Player_default_instance_;
class DPadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DPad> {
} _DPad_default_instance_;

namespace protobuf_common_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, name_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Game_default_instance_), path_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Game_default_instance_), url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, playernumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, player_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPad, up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPad, down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPad, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPad, right_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Game)},
  { 9, -1, sizeof(Shape)},
  { 16, -1, sizeof(Player)},
  { 23, -1, sizeof(DPad)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Shape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DPad_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Game_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Shape_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Player_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DPad_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Game_default_instance_.DefaultConstruct();
  _Shape_default_instance_.DefaultConstruct();
  _Player_default_instance_.DefaultConstruct();
  _DPad_default_instance_.DefaultConstruct();
  _Game_default_instance_.path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Game_default_instance_.url_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014common.proto\022\036org.beachc.deep_thought."
      "common\"\?\n\004Game\022\014\n\004name\030\001 \001(\t\022\016\n\004path\030\002 \001"
      "(\tH\000\022\r\n\003url\030\003 \001(\tH\000B\n\n\010location\"\035\n\005Shape"
      "\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\".\n\006Player\022\024\n\014play"
      "erNumber\030\001 \001(\005\022\016\n\006player\030\002 \001(\005\"=\n\004DPad\022\n"
      "\n\002up\030\001 \001(\010\022\014\n\004down\030\002 \001(\010\022\014\n\004left\030\003 \001(\010\022\r"
      "\n\005right\030\004 \001(\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 261);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_common_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game::kNameFieldNumber;
const int Game::kPathFieldNumber;
const int Game::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game::Game()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.common.Game)
}
Game::Game(const Game& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_location();
  switch (from.location_case()) {
    case kPath: {
      set_path(from.path());
      break;
    }
    case kUrl: {
      set_url(from.url());
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.common.Game)
}

void Game::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location();
  _cached_size_ = 0;
}

Game::~Game() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.common.Game)
  SharedDtor();
}

void Game::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_location()) {
    clear_location();
  }
}

void Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Game& Game::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game* Game::New(::google::protobuf::Arena* arena) const {
  Game* n = new Game;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game::clear_location() {
// @@protoc_insertion_point(one_of_clear_start:org.beachc.deep_thought.common.Game)
  switch (location_case()) {
    case kPath: {
      location_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kUrl: {
      location_.url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCATION_NOT_SET;
}


void Game::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.common.Game)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_location();
}

bool Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.common.Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "org.beachc.deep_thought.common.Game.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "org.beachc.deep_thought.common.Game.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "org.beachc.deep_thought.common.Game.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.common.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.common.Game)
  return false;
#undef DO_
}

void Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.common.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.beachc.deep_thought.common.Game.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.beachc.deep_thought.common.Game.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.beachc.deep_thought.common.Game.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.common.Game)
}

::google::protobuf::uint8* Game::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.common.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.beachc.deep_thought.common.Game.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.beachc.deep_thought.common.Game.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.beachc.deep_thought.common.Game.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.common.Game)
  return target;
}

size_t Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.common.Game)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (location_case()) {
    // string path = 2;
    case kPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
      break;
    }
    // string url = 3;
    case kUrl: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.common.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const Game* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.common.Game)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.common.Game)
    MergeFrom(*source);
  }
}

void Game::MergeFrom(const Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.common.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.location_case()) {
    case kPath: {
      set_path(from.path());
      break;
    }
    case kUrl: {
      set_url(from.url());
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
}

void Game::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.common.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game::CopyFrom(const Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.common.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game::IsInitialized() const {
  return true;
}

void Game::Swap(Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game::InternalSwap(Game* other) {
  name_.Swap(&other->name_);
  std::swap(location_, other->location_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game

// string name = 1;
void Game::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game::name() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Game.name)
  return name_.GetNoArena();
}
void Game::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.name)
}
#if LANG_CXX11
void Game::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.beachc.deep_thought.common.Game.name)
}
#endif
void Game::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.beachc.deep_thought.common.Game.name)
}
void Game::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.beachc.deep_thought.common.Game.name)
}
::std::string* Game::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.common.Game.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game::release_name() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.common.Game.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.common.Game.name)
}

// string path = 2;
bool Game::has_path() const {
  return location_case() == kPath;
}
void Game::set_has_path() {
  _oneof_case_[0] = kPath;
}
void Game::clear_path() {
  if (has_path()) {
    location_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_location();
  }
}
const ::std::string& Game::path() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Game.path)
  if (has_path()) {
    return location_.path_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Game::set_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.path)
  if (!has_path()) {
    clear_location();
    set_has_path();
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.path)
}
#if LANG_CXX11
void Game::set_path(::std::string&& value) {
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.path)
  if (!has_path()) {
    clear_location();
    set_has_path();
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.beachc.deep_thought.common.Game.path)
}
#endif
void Game::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_path()) {
    clear_location();
    set_has_path();
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.beachc.deep_thought.common.Game.path)
}
void Game::set_path(const char* value, size_t size) {
  if (!has_path()) {
    clear_location();
    set_has_path();
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.beachc.deep_thought.common.Game.path)
}
::std::string* Game::mutable_path() {
  if (!has_path()) {
    clear_location();
    set_has_path();
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.common.Game.path)
  return location_.path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game::release_path() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.common.Game.path)
  if (has_path()) {
    clear_has_location();
    return location_.path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Game::set_allocated_path(::std::string* path) {
  if (!has_path()) {
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_location();
  if (path != NULL) {
    set_has_path();
    location_.path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        path);
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.common.Game.path)
}

// string url = 3;
bool Game::has_url() const {
  return location_case() == kUrl;
}
void Game::set_has_url() {
  _oneof_case_[0] = kUrl;
}
void Game::clear_url() {
  if (has_url()) {
    location_.url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_location();
  }
}
const ::std::string& Game::url() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Game.url)
  if (has_url()) {
    return location_.url_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Game::set_url(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.url)
  if (!has_url()) {
    clear_location();
    set_has_url();
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.url)
}
#if LANG_CXX11
void Game::set_url(::std::string&& value) {
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.url)
  if (!has_url()) {
    clear_location();
    set_has_url();
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.beachc.deep_thought.common.Game.url)
}
#endif
void Game::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_url()) {
    clear_location();
    set_has_url();
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.beachc.deep_thought.common.Game.url)
}
void Game::set_url(const char* value, size_t size) {
  if (!has_url()) {
    clear_location();
    set_has_url();
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.beachc.deep_thought.common.Game.url)
}
::std::string* Game::mutable_url() {
  if (!has_url()) {
    clear_location();
    set_has_url();
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.common.Game.url)
  return location_.url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game::release_url() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.common.Game.url)
  if (has_url()) {
    clear_has_location();
    return location_.url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Game::set_allocated_url(::std::string* url) {
  if (!has_url()) {
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_location();
  if (url != NULL) {
    set_has_url();
    location_.url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        url);
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.common.Game.url)
}

bool Game::has_location() const {
  return location_case() != LOCATION_NOT_SET;
}
void Game::clear_has_location() {
  _oneof_case_[0] = LOCATION_NOT_SET;
}
Game::LocationCase Game::location_case() const {
  return Game::LocationCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shape::kXFieldNumber;
const int Shape::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shape::Shape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.common.Shape)
}
Shape::Shape(const Shape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.common.Shape)
}

void Shape::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Shape::~Shape() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.common.Shape)
  SharedDtor();
}

void Shape::SharedDtor() {
}

void Shape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shape::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shape& Shape::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

Shape* Shape::New(::google::protobuf::Arena* arena) const {
  Shape* n = new Shape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.common.Shape)
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

bool Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.common.Shape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.common.Shape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.common.Shape)
  return false;
#undef DO_
}

void Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.common.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.common.Shape)
}

::google::protobuf::uint8* Shape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.common.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.common.Shape)
  return target;
}

size_t Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.common.Shape)
  size_t total_size = 0;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.common.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  const Shape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.common.Shape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.common.Shape)
    MergeFrom(*source);
  }
}

void Shape::MergeFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.common.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Shape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.common.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shape::CopyFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.common.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {
  return true;
}

void Shape::Swap(Shape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shape::InternalSwap(Shape* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shape::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Shape

// int32 x = 1;
void Shape::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Shape::x() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Shape.x)
  return x_;
}
void Shape::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Shape.x)
}

// int32 y = 2;
void Shape::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Shape::y() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Shape.y)
  return y_;
}
void Shape::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Shape.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kPlayerNumberFieldNumber;
const int Player::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.common.Player)
}
Player::Player(const Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playernumber_, &from.playernumber_,
    reinterpret_cast<char*>(&player_) -
    reinterpret_cast<char*>(&playernumber_) + sizeof(player_));
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.common.Player)
}

void Player::SharedCtor() {
  ::memset(&playernumber_, 0, reinterpret_cast<char*>(&player_) -
    reinterpret_cast<char*>(&playernumber_) + sizeof(player_));
  _cached_size_ = 0;
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.common.Player)
  SharedDtor();
}

void Player::SharedDtor() {
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Player& Player::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

Player* Player::New(::google::protobuf::Arena* arena) const {
  Player* n = new Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.common.Player)
  ::memset(&playernumber_, 0, reinterpret_cast<char*>(&player_) -
    reinterpret_cast<char*>(&playernumber_) + sizeof(player_));
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.common.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 playerNumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.common.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.common.Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.common.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerNumber = 1;
  if (this->playernumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playernumber(), output);
  }

  // int32 player = 2;
  if (this->player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.common.Player)
}

::google::protobuf::uint8* Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.common.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerNumber = 1;
  if (this->playernumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playernumber(), target);
  }

  // int32 player = 2;
  if (this->player() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.common.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.common.Player)
  size_t total_size = 0;

  // int32 playerNumber = 1;
  if (this->playernumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playernumber());
  }

  // int32 player = 2;
  if (this->player() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.common.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.common.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.common.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.common.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playernumber() != 0) {
    set_playernumber(from.playernumber());
  }
  if (from.player() != 0) {
    set_player(from.player());
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.common.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.common.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  std::swap(playernumber_, other->playernumber_);
  std::swap(player_, other->player_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player

// int32 playerNumber = 1;
void Player::clear_playernumber() {
  playernumber_ = 0;
}
::google::protobuf::int32 Player::playernumber() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Player.playerNumber)
  return playernumber_;
}
void Player::set_playernumber(::google::protobuf::int32 value) {
  
  playernumber_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Player.playerNumber)
}

// int32 player = 2;
void Player::clear_player() {
  player_ = 0;
}
::google::protobuf::int32 Player::player() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Player.player)
  return player_;
}
void Player::set_player(::google::protobuf::int32 value) {
  
  player_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Player.player)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DPad::kUpFieldNumber;
const int DPad::kDownFieldNumber;
const int DPad::kLeftFieldNumber;
const int DPad::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DPad::DPad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.common.DPad)
}
DPad::DPad(const DPad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&up_) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.common.DPad)
}

void DPad::SharedCtor() {
  ::memset(&up_, 0, reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&up_) + sizeof(right_));
  _cached_size_ = 0;
}

DPad::~DPad() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.common.DPad)
  SharedDtor();
}

void DPad::SharedDtor() {
}

void DPad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DPad::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DPad& DPad::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

DPad* DPad::New(::google::protobuf::Arena* arena) const {
  DPad* n = new DPad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DPad::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.common.DPad)
  ::memset(&up_, 0, reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&up_) + sizeof(right_));
}

bool DPad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.common.DPad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool up = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool down = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.common.DPad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.common.DPad)
  return false;
#undef DO_
}

void DPad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.common.DPad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->up(), output);
  }

  // bool down = 2;
  if (this->down() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->down(), output);
  }

  // bool left = 3;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->left(), output);
  }

  // bool right = 4;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->right(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.common.DPad)
}

::google::protobuf::uint8* DPad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.common.DPad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->up(), target);
  }

  // bool down = 2;
  if (this->down() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->down(), target);
  }

  // bool left = 3;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->left(), target);
  }

  // bool right = 4;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->right(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.common.DPad)
  return target;
}

size_t DPad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.common.DPad)
  size_t total_size = 0;

  // bool up = 1;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // bool down = 2;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  // bool left = 3;
  if (this->left() != 0) {
    total_size += 1 + 1;
  }

  // bool right = 4;
  if (this->right() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DPad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.common.DPad)
  GOOGLE_DCHECK_NE(&from, this);
  const DPad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DPad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.common.DPad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.common.DPad)
    MergeFrom(*source);
  }
}

void DPad::MergeFrom(const DPad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.common.DPad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.up() != 0) {
    set_up(from.up());
  }
  if (from.down() != 0) {
    set_down(from.down());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
}

void DPad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.common.DPad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DPad::CopyFrom(const DPad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.common.DPad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DPad::IsInitialized() const {
  return true;
}

void DPad::Swap(DPad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DPad::InternalSwap(DPad* other) {
  std::swap(up_, other->up_);
  std::swap(down_, other->down_);
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DPad::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DPad

// bool up = 1;
void DPad::clear_up() {
  up_ = false;
}
bool DPad::up() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.DPad.up)
  return up_;
}
void DPad::set_up(bool value) {
  
  up_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.DPad.up)
}

// bool down = 2;
void DPad::clear_down() {
  down_ = false;
}
bool DPad::down() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.DPad.down)
  return down_;
}
void DPad::set_down(bool value) {
  
  down_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.DPad.down)
}

// bool left = 3;
void DPad::clear_left() {
  left_ = false;
}
bool DPad::left() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.DPad.left)
  return left_;
}
void DPad::set_left(bool value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.DPad.left)
}

// bool right = 4;
void DPad::clear_right() {
  right_ = false;
}
bool DPad::right() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.DPad.right)
  return right_;
}
void DPad::set_right(bool value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.DPad.right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace deep_thought
}  // namespace beachc
}  // namespace org

// @@protoc_insertion_point(global_scope)
