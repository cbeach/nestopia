// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace org {
namespace beachc {
namespace deep_thought {
namespace common {
class DPad;
class DPadDefaultTypeInternal;
extern DPadDefaultTypeInternal _DPad_default_instance_;
class Game;
class GameDefaultTypeInternal;
extern GameDefaultTypeInternal _Game_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
}  // namespace common
}  // namespace deep_thought
}  // namespace beachc
}  // namespace org

namespace org {
namespace beachc {
namespace deep_thought {
namespace common {

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_common_2eproto

// ===================================================================

class Game : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.beachc.deep_thought.common.Game) */ {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game& default_instance();

  enum LocationCase {
    kPath = 2,
    kUrl = 3,
    LOCATION_NOT_SET = 0,
  };

  static inline const Game* internal_default_instance() {
    return reinterpret_cast<const Game*>(
               &_Game_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Game* other);

  // implements Message ----------------------------------------------

  inline Game* New() const PROTOBUF_FINAL { return New(NULL); }

  Game* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string path = 2;
  private:
  bool has_path() const;
  public:
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string url = 3;
  private:
  bool has_url() const;
  public:
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  LocationCase location_case() const;
  // @@protoc_insertion_point(class_scope:org.beachc.deep_thought.common.Game)
 private:
  void set_has_path();
  void set_has_url();

  inline bool has_location() const;
  void clear_location();
  inline void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union LocationUnion {
    LocationUnion() {}
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr url_;
  } location_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Shape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.beachc.deep_thought.common.Shape) */ {
 public:
  Shape();
  virtual ~Shape();

  Shape(const Shape& from);

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Shape& default_instance();

  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Shape* other);

  // implements Message ----------------------------------------------

  inline Shape* New() const PROTOBUF_FINAL { return New(NULL); }

  Shape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Shape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.beachc.deep_thought.common.Shape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.beachc.deep_thought.common.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  inline Player* New() const PROTOBUF_FINAL { return New(NULL); }

  Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 playerNumber = 1;
  void clear_playernumber();
  static const int kPlayerNumberFieldNumber = 1;
  ::google::protobuf::int32 playernumber() const;
  void set_playernumber(::google::protobuf::int32 value);

  // int32 player = 2;
  void clear_player();
  static const int kPlayerFieldNumber = 2;
  ::google::protobuf::int32 player() const;
  void set_player(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.beachc.deep_thought.common.Player)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 playernumber_;
  ::google::protobuf::int32 player_;
  mutable int _cached_size_;
  friend struct protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DPad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.beachc.deep_thought.common.DPad) */ {
 public:
  DPad();
  virtual ~DPad();

  DPad(const DPad& from);

  inline DPad& operator=(const DPad& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DPad& default_instance();

  static inline const DPad* internal_default_instance() {
    return reinterpret_cast<const DPad*>(
               &_DPad_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DPad* other);

  // implements Message ----------------------------------------------

  inline DPad* New() const PROTOBUF_FINAL { return New(NULL); }

  DPad* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DPad& from);
  void MergeFrom(const DPad& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DPad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool up = 1;
  void clear_up();
  static const int kUpFieldNumber = 1;
  bool up() const;
  void set_up(bool value);

  // bool down = 2;
  void clear_down();
  static const int kDownFieldNumber = 2;
  bool down() const;
  void set_down(bool value);

  // bool left = 3;
  void clear_left();
  static const int kLeftFieldNumber = 3;
  bool left() const;
  void set_left(bool value);

  // bool right = 4;
  void clear_right();
  static const int kRightFieldNumber = 4;
  bool right() const;
  void set_right(bool value);

  // @@protoc_insertion_point(class_scope:org.beachc.deep_thought.common.DPad)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool up_;
  bool down_;
  bool left_;
  bool right_;
  mutable int _cached_size_;
  friend struct protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Game

// string name = 1;
inline void Game::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game::name() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Game.name)
  return name_.GetNoArena();
}
inline void Game::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.name)
}
#if LANG_CXX11
inline void Game::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.beachc.deep_thought.common.Game.name)
}
#endif
inline void Game::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.beachc.deep_thought.common.Game.name)
}
inline void Game::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.beachc.deep_thought.common.Game.name)
}
inline ::std::string* Game::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.common.Game.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game::release_name() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.common.Game.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.common.Game.name)
}

// string path = 2;
inline bool Game::has_path() const {
  return location_case() == kPath;
}
inline void Game::set_has_path() {
  _oneof_case_[0] = kPath;
}
inline void Game::clear_path() {
  if (has_path()) {
    location_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_location();
  }
}
inline const ::std::string& Game::path() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Game.path)
  if (has_path()) {
    return location_.path_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Game::set_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.path)
  if (!has_path()) {
    clear_location();
    set_has_path();
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.path)
}
#if LANG_CXX11
inline void Game::set_path(::std::string&& value) {
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.path)
  if (!has_path()) {
    clear_location();
    set_has_path();
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.beachc.deep_thought.common.Game.path)
}
#endif
inline void Game::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_path()) {
    clear_location();
    set_has_path();
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.beachc.deep_thought.common.Game.path)
}
inline void Game::set_path(const char* value, size_t size) {
  if (!has_path()) {
    clear_location();
    set_has_path();
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.beachc.deep_thought.common.Game.path)
}
inline ::std::string* Game::mutable_path() {
  if (!has_path()) {
    clear_location();
    set_has_path();
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.common.Game.path)
  return location_.path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game::release_path() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.common.Game.path)
  if (has_path()) {
    clear_has_location();
    return location_.path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Game::set_allocated_path(::std::string* path) {
  if (!has_path()) {
    location_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_location();
  if (path != NULL) {
    set_has_path();
    location_.path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        path);
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.common.Game.path)
}

// string url = 3;
inline bool Game::has_url() const {
  return location_case() == kUrl;
}
inline void Game::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void Game::clear_url() {
  if (has_url()) {
    location_.url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_location();
  }
}
inline const ::std::string& Game::url() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Game.url)
  if (has_url()) {
    return location_.url_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Game::set_url(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.url)
  if (!has_url()) {
    clear_location();
    set_has_url();
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.url)
}
#if LANG_CXX11
inline void Game::set_url(::std::string&& value) {
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Game.url)
  if (!has_url()) {
    clear_location();
    set_has_url();
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.beachc.deep_thought.common.Game.url)
}
#endif
inline void Game::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_url()) {
    clear_location();
    set_has_url();
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.beachc.deep_thought.common.Game.url)
}
inline void Game::set_url(const char* value, size_t size) {
  if (!has_url()) {
    clear_location();
    set_has_url();
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  location_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.beachc.deep_thought.common.Game.url)
}
inline ::std::string* Game::mutable_url() {
  if (!has_url()) {
    clear_location();
    set_has_url();
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.common.Game.url)
  return location_.url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game::release_url() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.common.Game.url)
  if (has_url()) {
    clear_has_location();
    return location_.url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Game::set_allocated_url(::std::string* url) {
  if (!has_url()) {
    location_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_location();
  if (url != NULL) {
    set_has_url();
    location_.url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        url);
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.common.Game.url)
}

inline bool Game::has_location() const {
  return location_case() != LOCATION_NOT_SET;
}
inline void Game::clear_has_location() {
  _oneof_case_[0] = LOCATION_NOT_SET;
}
inline Game::LocationCase Game::location_case() const {
  return Game::LocationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Shape

// int32 x = 1;
inline void Shape::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Shape::x() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Shape.x)
  return x_;
}
inline void Shape::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Shape.x)
}

// int32 y = 2;
inline void Shape::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Shape::y() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Shape.y)
  return y_;
}
inline void Shape::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Shape.y)
}

// -------------------------------------------------------------------

// Player

// int32 playerNumber = 1;
inline void Player::clear_playernumber() {
  playernumber_ = 0;
}
inline ::google::protobuf::int32 Player::playernumber() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Player.playerNumber)
  return playernumber_;
}
inline void Player::set_playernumber(::google::protobuf::int32 value) {
  
  playernumber_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Player.playerNumber)
}

// int32 player = 2;
inline void Player::clear_player() {
  player_ = 0;
}
inline ::google::protobuf::int32 Player::player() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.Player.player)
  return player_;
}
inline void Player::set_player(::google::protobuf::int32 value) {
  
  player_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.Player.player)
}

// -------------------------------------------------------------------

// DPad

// bool up = 1;
inline void DPad::clear_up() {
  up_ = false;
}
inline bool DPad::up() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.DPad.up)
  return up_;
}
inline void DPad::set_up(bool value) {
  
  up_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.DPad.up)
}

// bool down = 2;
inline void DPad::clear_down() {
  down_ = false;
}
inline bool DPad::down() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.DPad.down)
  return down_;
}
inline void DPad::set_down(bool value) {
  
  down_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.DPad.down)
}

// bool left = 3;
inline void DPad::clear_left() {
  left_ = false;
}
inline bool DPad::left() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.DPad.left)
  return left_;
}
inline void DPad::set_left(bool value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.DPad.left)
}

// bool right = 4;
inline void DPad::clear_right() {
  right_ = false;
}
inline bool DPad::right() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.common.DPad.right)
  return right_;
}
inline void DPad::set_right(bool value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.common.DPad.right)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace common
}  // namespace deep_thought
}  // namespace beachc
}  // namespace org

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
