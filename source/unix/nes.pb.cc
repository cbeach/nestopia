// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace beachc {
namespace deep_thought {
namespace nes {
class NESConsoleStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NESConsoleState> {
} _NESConsoleState_default_instance_;
class NESControllerStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NESControllerState> {
} _NESControllerState_default_instance_;
class NestopiaControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NestopiaControl> {
} _NestopiaControl_default_instance_;

namespace protobuf_nes_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESConsoleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESConsoleState, player1_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESConsoleState, player2_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESConsoleState, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESConsoleState, reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESConsoleState, insertgame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESConsoleState, game_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESControllerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESControllerState, dpad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESControllerState, select_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESControllerState, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESControllerState, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESControllerState, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESControllerState, trurboa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESControllerState, trurbob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NESControllerState, player_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, altspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, insertcoin1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, insertcoin2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, fdsflip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, fdsswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, qsave1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, qsave2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, qload1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, qload2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, screenshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, rwstart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, rwstop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, fullscreen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, scalefactor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestopiaControl, quit_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(NESConsoleState)},
  { 11, -1, sizeof(NESControllerState)},
  { 24, -1, sizeof(NestopiaControl)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NESConsoleState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NESControllerState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NestopiaControl_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "nes.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _NESConsoleState_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NESControllerState_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NestopiaControl_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::org::beachc::deep_thought::common::protobuf_common_2eproto::InitDefaults();
  _NESConsoleState_default_instance_.DefaultConstruct();
  _NESControllerState_default_instance_.DefaultConstruct();
  _NestopiaControl_default_instance_.DefaultConstruct();
  _NESConsoleState_default_instance_.get_mutable()->player1_input_ = const_cast< ::org::beachc::deep_thought::nes::NESControllerState*>(
      ::org::beachc::deep_thought::nes::NESControllerState::internal_default_instance());
  _NESConsoleState_default_instance_.get_mutable()->player2_input_ = const_cast< ::org::beachc::deep_thought::nes::NESControllerState*>(
      ::org::beachc::deep_thought::nes::NESControllerState::internal_default_instance());
  _NESConsoleState_default_instance_.get_mutable()->game_ = const_cast< ::org::beachc::deep_thought::common::Game*>(
      ::org::beachc::deep_thought::common::Game::internal_default_instance());
  _NESControllerState_default_instance_.get_mutable()->dpad_ = const_cast< ::org::beachc::deep_thought::common::DPad*>(
      ::org::beachc::deep_thought::common::DPad::internal_default_instance());
  _NESControllerState_default_instance_.get_mutable()->player_ = const_cast< ::org::beachc::deep_thought::common::Player*>(
      ::org::beachc::deep_thought::common::Player::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\tnes.proto\022\033org.beachc.deep_thought.nes"
      "\032\014common.proto\"\207\002\n\017NESConsoleState\022F\n\rpl"
      "ayer1_input\030\001 \001(\0132/.org.beachc.deep_thou"
      "ght.nes.NESControllerState\022F\n\rplayer2_in"
      "put\030\002 \001(\0132/.org.beachc.deep_thought.nes."
      "NESControllerState\022\r\n\005power\030\003 \001(\010\022\r\n\005res"
      "et\030\004 \001(\010\022\022\n\ninsertGame\030\005 \001(\010\0222\n\004game\030\006 \001"
      "(\0132$.org.beachc.deep_thought.common.Game"
      "\"\327\001\n\022NESControllerState\0222\n\004dpad\030\001 \001(\0132$."
      "org.beachc.deep_thought.common.DPad\022\016\n\006s"
      "elect\030\002 \001(\010\022\r\n\005start\030\003 \001(\010\022\t\n\001a\030\004 \001(\010\022\t\n"
      "\001b\030\005 \001(\010\022\017\n\007trurboA\030\006 \001(\010\022\017\n\007trurboB\030\007 \001"
      "(\010\0226\n\006player\030\010 \001(\0132&.org.beachc.deep_tho"
      "ught.common.Player\"\274\002\n\017NestopiaControl\022\020"
      "\n\010altspeed\030\001 \001(\010\022\023\n\013insertcoin1\030\002 \001(\010\022\023\n"
      "\013insertcoin2\030\003 \001(\010\022\017\n\007fdsflip\030\004 \001(\010\022\021\n\tf"
      "dsswitch\030\005 \001(\010\022\016\n\006qsave1\030\006 \001(\010\022\016\n\006qsave2"
      "\030\007 \001(\010\022\016\n\006qload1\030\010 \001(\010\022\016\n\006qload2\030\t \001(\010\022\022"
      "\n\nscreenshot\030\n \001(\010\022\r\n\005reset\030\013 \001(\010\022\017\n\007rws"
      "tart\030\014 \001(\010\022\016\n\006rwstop\030\r \001(\010\022\022\n\nfullscreen"
      "\030\016 \001(\010\022\016\n\006filter\030\017 \001(\010\022\023\n\013scalefactor\030\020 "
      "\001(\010\022\014\n\004quit\030\021 \001(\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 865);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nes.proto", &protobuf_RegisterTypes);
  ::org::beachc::deep_thought::common::protobuf_common_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_nes_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NESConsoleState::kPlayer1InputFieldNumber;
const int NESConsoleState::kPlayer2InputFieldNumber;
const int NESConsoleState::kPowerFieldNumber;
const int NESConsoleState::kResetFieldNumber;
const int NESConsoleState::kInsertGameFieldNumber;
const int NESConsoleState::kGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NESConsoleState::NESConsoleState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_nes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.nes.NESConsoleState)
}
NESConsoleState::NESConsoleState(const NESConsoleState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player1_input()) {
    player1_input_ = new ::org::beachc::deep_thought::nes::NESControllerState(*from.player1_input_);
  } else {
    player1_input_ = NULL;
  }
  if (from.has_player2_input()) {
    player2_input_ = new ::org::beachc::deep_thought::nes::NESControllerState(*from.player2_input_);
  } else {
    player2_input_ = NULL;
  }
  if (from.has_game()) {
    game_ = new ::org::beachc::deep_thought::common::Game(*from.game_);
  } else {
    game_ = NULL;
  }
  ::memcpy(&power_, &from.power_,
    reinterpret_cast<char*>(&insertgame_) -
    reinterpret_cast<char*>(&power_) + sizeof(insertgame_));
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.nes.NESConsoleState)
}

void NESConsoleState::SharedCtor() {
  ::memset(&player1_input_, 0, reinterpret_cast<char*>(&insertgame_) -
    reinterpret_cast<char*>(&player1_input_) + sizeof(insertgame_));
  _cached_size_ = 0;
}

NESConsoleState::~NESConsoleState() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.nes.NESConsoleState)
  SharedDtor();
}

void NESConsoleState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete player1_input_;
  }
  if (this != internal_default_instance()) {
    delete player2_input_;
  }
  if (this != internal_default_instance()) {
    delete game_;
  }
}

void NESConsoleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NESConsoleState::descriptor() {
  protobuf_nes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NESConsoleState& NESConsoleState::default_instance() {
  protobuf_nes_2eproto::InitDefaults();
  return *internal_default_instance();
}

NESConsoleState* NESConsoleState::New(::google::protobuf::Arena* arena) const {
  NESConsoleState* n = new NESConsoleState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NESConsoleState::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.nes.NESConsoleState)
  if (GetArenaNoVirtual() == NULL && player1_input_ != NULL) {
    delete player1_input_;
  }
  player1_input_ = NULL;
  if (GetArenaNoVirtual() == NULL && player2_input_ != NULL) {
    delete player2_input_;
  }
  player2_input_ = NULL;
  if (GetArenaNoVirtual() == NULL && game_ != NULL) {
    delete game_;
  }
  game_ = NULL;
  ::memset(&power_, 0, reinterpret_cast<char*>(&insertgame_) -
    reinterpret_cast<char*>(&power_) + sizeof(insertgame_));
}

bool NESConsoleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.nes.NESConsoleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.beachc.deep_thought.nes.NESControllerState player1_input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player1_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.beachc.deep_thought.nes.NESControllerState player2_input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player2_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool power = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool insertGame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &insertgame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.beachc.deep_thought.common.Game game = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.nes.NESConsoleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.nes.NESConsoleState)
  return false;
#undef DO_
}

void NESConsoleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.nes.NESConsoleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.nes.NESControllerState player1_input = 1;
  if (this->has_player1_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player1_input_, output);
  }

  // .org.beachc.deep_thought.nes.NESControllerState player2_input = 2;
  if (this->has_player2_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player2_input_, output);
  }

  // bool power = 3;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->power(), output);
  }

  // bool reset = 4;
  if (this->reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reset(), output);
  }

  // bool insertGame = 5;
  if (this->insertgame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->insertgame(), output);
  }

  // .org.beachc.deep_thought.common.Game game = 6;
  if (this->has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->game_, output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.nes.NESConsoleState)
}

::google::protobuf::uint8* NESConsoleState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.nes.NESConsoleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.nes.NESControllerState player1_input = 1;
  if (this->has_player1_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player1_input_, deterministic, target);
  }

  // .org.beachc.deep_thought.nes.NESControllerState player2_input = 2;
  if (this->has_player2_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->player2_input_, deterministic, target);
  }

  // bool power = 3;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->power(), target);
  }

  // bool reset = 4;
  if (this->reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reset(), target);
  }

  // bool insertGame = 5;
  if (this->insertgame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->insertgame(), target);
  }

  // .org.beachc.deep_thought.common.Game game = 6;
  if (this->has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->game_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.nes.NESConsoleState)
  return target;
}

size_t NESConsoleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.nes.NESConsoleState)
  size_t total_size = 0;

  // .org.beachc.deep_thought.nes.NESControllerState player1_input = 1;
  if (this->has_player1_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player1_input_);
  }

  // .org.beachc.deep_thought.nes.NESControllerState player2_input = 2;
  if (this->has_player2_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player2_input_);
  }

  // .org.beachc.deep_thought.common.Game game = 6;
  if (this->has_game()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_);
  }

  // bool power = 3;
  if (this->power() != 0) {
    total_size += 1 + 1;
  }

  // bool reset = 4;
  if (this->reset() != 0) {
    total_size += 1 + 1;
  }

  // bool insertGame = 5;
  if (this->insertgame() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NESConsoleState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.nes.NESConsoleState)
  GOOGLE_DCHECK_NE(&from, this);
  const NESConsoleState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NESConsoleState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.nes.NESConsoleState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.nes.NESConsoleState)
    MergeFrom(*source);
  }
}

void NESConsoleState::MergeFrom(const NESConsoleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.nes.NESConsoleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player1_input()) {
    mutable_player1_input()->::org::beachc::deep_thought::nes::NESControllerState::MergeFrom(from.player1_input());
  }
  if (from.has_player2_input()) {
    mutable_player2_input()->::org::beachc::deep_thought::nes::NESControllerState::MergeFrom(from.player2_input());
  }
  if (from.has_game()) {
    mutable_game()->::org::beachc::deep_thought::common::Game::MergeFrom(from.game());
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
  if (from.reset() != 0) {
    set_reset(from.reset());
  }
  if (from.insertgame() != 0) {
    set_insertgame(from.insertgame());
  }
}

void NESConsoleState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.nes.NESConsoleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NESConsoleState::CopyFrom(const NESConsoleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.nes.NESConsoleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NESConsoleState::IsInitialized() const {
  return true;
}

void NESConsoleState::Swap(NESConsoleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NESConsoleState::InternalSwap(NESConsoleState* other) {
  std::swap(player1_input_, other->player1_input_);
  std::swap(player2_input_, other->player2_input_);
  std::swap(game_, other->game_);
  std::swap(power_, other->power_);
  std::swap(reset_, other->reset_);
  std::swap(insertgame_, other->insertgame_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NESConsoleState::GetMetadata() const {
  protobuf_nes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NESConsoleState

// .org.beachc.deep_thought.nes.NESControllerState player1_input = 1;
bool NESConsoleState::has_player1_input() const {
  return this != internal_default_instance() && player1_input_ != NULL;
}
void NESConsoleState::clear_player1_input() {
  if (GetArenaNoVirtual() == NULL && player1_input_ != NULL) delete player1_input_;
  player1_input_ = NULL;
}
const ::org::beachc::deep_thought::nes::NESControllerState& NESConsoleState::player1_input() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESConsoleState.player1_input)
  return player1_input_ != NULL ? *player1_input_
                         : *::org::beachc::deep_thought::nes::NESControllerState::internal_default_instance();
}
::org::beachc::deep_thought::nes::NESControllerState* NESConsoleState::mutable_player1_input() {
  
  if (player1_input_ == NULL) {
    player1_input_ = new ::org::beachc::deep_thought::nes::NESControllerState;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.nes.NESConsoleState.player1_input)
  return player1_input_;
}
::org::beachc::deep_thought::nes::NESControllerState* NESConsoleState::release_player1_input() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.nes.NESConsoleState.player1_input)
  
  ::org::beachc::deep_thought::nes::NESControllerState* temp = player1_input_;
  player1_input_ = NULL;
  return temp;
}
void NESConsoleState::set_allocated_player1_input(::org::beachc::deep_thought::nes::NESControllerState* player1_input) {
  delete player1_input_;
  player1_input_ = player1_input;
  if (player1_input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.nes.NESConsoleState.player1_input)
}

// .org.beachc.deep_thought.nes.NESControllerState player2_input = 2;
bool NESConsoleState::has_player2_input() const {
  return this != internal_default_instance() && player2_input_ != NULL;
}
void NESConsoleState::clear_player2_input() {
  if (GetArenaNoVirtual() == NULL && player2_input_ != NULL) delete player2_input_;
  player2_input_ = NULL;
}
const ::org::beachc::deep_thought::nes::NESControllerState& NESConsoleState::player2_input() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESConsoleState.player2_input)
  return player2_input_ != NULL ? *player2_input_
                         : *::org::beachc::deep_thought::nes::NESControllerState::internal_default_instance();
}
::org::beachc::deep_thought::nes::NESControllerState* NESConsoleState::mutable_player2_input() {
  
  if (player2_input_ == NULL) {
    player2_input_ = new ::org::beachc::deep_thought::nes::NESControllerState;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.nes.NESConsoleState.player2_input)
  return player2_input_;
}
::org::beachc::deep_thought::nes::NESControllerState* NESConsoleState::release_player2_input() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.nes.NESConsoleState.player2_input)
  
  ::org::beachc::deep_thought::nes::NESControllerState* temp = player2_input_;
  player2_input_ = NULL;
  return temp;
}
void NESConsoleState::set_allocated_player2_input(::org::beachc::deep_thought::nes::NESControllerState* player2_input) {
  delete player2_input_;
  player2_input_ = player2_input;
  if (player2_input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.nes.NESConsoleState.player2_input)
}

// bool power = 3;
void NESConsoleState::clear_power() {
  power_ = false;
}
bool NESConsoleState::power() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESConsoleState.power)
  return power_;
}
void NESConsoleState::set_power(bool value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NESConsoleState.power)
}

// bool reset = 4;
void NESConsoleState::clear_reset() {
  reset_ = false;
}
bool NESConsoleState::reset() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESConsoleState.reset)
  return reset_;
}
void NESConsoleState::set_reset(bool value) {
  
  reset_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NESConsoleState.reset)
}

// bool insertGame = 5;
void NESConsoleState::clear_insertgame() {
  insertgame_ = false;
}
bool NESConsoleState::insertgame() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESConsoleState.insertGame)
  return insertgame_;
}
void NESConsoleState::set_insertgame(bool value) {
  
  insertgame_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NESConsoleState.insertGame)
}

// .org.beachc.deep_thought.common.Game game = 6;
bool NESConsoleState::has_game() const {
  return this != internal_default_instance() && game_ != NULL;
}
void NESConsoleState::clear_game() {
  if (GetArenaNoVirtual() == NULL && game_ != NULL) delete game_;
  game_ = NULL;
}
const ::org::beachc::deep_thought::common::Game& NESConsoleState::game() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESConsoleState.game)
  return game_ != NULL ? *game_
                         : *::org::beachc::deep_thought::common::Game::internal_default_instance();
}
::org::beachc::deep_thought::common::Game* NESConsoleState::mutable_game() {
  
  if (game_ == NULL) {
    game_ = new ::org::beachc::deep_thought::common::Game;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.nes.NESConsoleState.game)
  return game_;
}
::org::beachc::deep_thought::common::Game* NESConsoleState::release_game() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.nes.NESConsoleState.game)
  
  ::org::beachc::deep_thought::common::Game* temp = game_;
  game_ = NULL;
  return temp;
}
void NESConsoleState::set_allocated_game(::org::beachc::deep_thought::common::Game* game) {
  delete game_;
  game_ = game;
  if (game) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.nes.NESConsoleState.game)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NESControllerState::kDpadFieldNumber;
const int NESControllerState::kSelectFieldNumber;
const int NESControllerState::kStartFieldNumber;
const int NESControllerState::kAFieldNumber;
const int NESControllerState::kBFieldNumber;
const int NESControllerState::kTrurboAFieldNumber;
const int NESControllerState::kTrurboBFieldNumber;
const int NESControllerState::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NESControllerState::NESControllerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_nes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.nes.NESControllerState)
}
NESControllerState::NESControllerState(const NESControllerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dpad()) {
    dpad_ = new ::org::beachc::deep_thought::common::DPad(*from.dpad_);
  } else {
    dpad_ = NULL;
  }
  if (from.has_player()) {
    player_ = new ::org::beachc::deep_thought::common::Player(*from.player_);
  } else {
    player_ = NULL;
  }
  ::memcpy(&select_, &from.select_,
    reinterpret_cast<char*>(&trurbob_) -
    reinterpret_cast<char*>(&select_) + sizeof(trurbob_));
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.nes.NESControllerState)
}

void NESControllerState::SharedCtor() {
  ::memset(&dpad_, 0, reinterpret_cast<char*>(&trurbob_) -
    reinterpret_cast<char*>(&dpad_) + sizeof(trurbob_));
  _cached_size_ = 0;
}

NESControllerState::~NESControllerState() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.nes.NESControllerState)
  SharedDtor();
}

void NESControllerState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dpad_;
  }
  if (this != internal_default_instance()) {
    delete player_;
  }
}

void NESControllerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NESControllerState::descriptor() {
  protobuf_nes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NESControllerState& NESControllerState::default_instance() {
  protobuf_nes_2eproto::InitDefaults();
  return *internal_default_instance();
}

NESControllerState* NESControllerState::New(::google::protobuf::Arena* arena) const {
  NESControllerState* n = new NESControllerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NESControllerState::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.nes.NESControllerState)
  if (GetArenaNoVirtual() == NULL && dpad_ != NULL) {
    delete dpad_;
  }
  dpad_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_ != NULL) {
    delete player_;
  }
  player_ = NULL;
  ::memset(&select_, 0, reinterpret_cast<char*>(&trurbob_) -
    reinterpret_cast<char*>(&select_) + sizeof(trurbob_));
}

bool NESControllerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.nes.NESControllerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.beachc.deep_thought.common.DPad dpad = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dpad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool select = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool b = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool trurboA = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trurboa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool trurboB = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trurbob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.beachc.deep_thought.common.Player player = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.nes.NESControllerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.nes.NESControllerState)
  return false;
#undef DO_
}

void NESControllerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.nes.NESControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.common.DPad dpad = 1;
  if (this->has_dpad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dpad_, output);
  }

  // bool select = 2;
  if (this->select() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->select(), output);
  }

  // bool start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->start(), output);
  }

  // bool a = 4;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->a(), output);
  }

  // bool b = 5;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->b(), output);
  }

  // bool trurboA = 6;
  if (this->trurboa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->trurboa(), output);
  }

  // bool trurboB = 7;
  if (this->trurbob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->trurbob(), output);
  }

  // .org.beachc.deep_thought.common.Player player = 8;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->player_, output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.nes.NESControllerState)
}

::google::protobuf::uint8* NESControllerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.nes.NESControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.common.DPad dpad = 1;
  if (this->has_dpad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dpad_, deterministic, target);
  }

  // bool select = 2;
  if (this->select() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->select(), target);
  }

  // bool start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->start(), target);
  }

  // bool a = 4;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->a(), target);
  }

  // bool b = 5;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->b(), target);
  }

  // bool trurboA = 6;
  if (this->trurboa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->trurboa(), target);
  }

  // bool trurboB = 7;
  if (this->trurbob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->trurbob(), target);
  }

  // .org.beachc.deep_thought.common.Player player = 8;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->player_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.nes.NESControllerState)
  return target;
}

size_t NESControllerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.nes.NESControllerState)
  size_t total_size = 0;

  // .org.beachc.deep_thought.common.DPad dpad = 1;
  if (this->has_dpad()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dpad_);
  }

  // .org.beachc.deep_thought.common.Player player = 8;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // bool select = 2;
  if (this->select() != 0) {
    total_size += 1 + 1;
  }

  // bool start = 3;
  if (this->start() != 0) {
    total_size += 1 + 1;
  }

  // bool a = 4;
  if (this->a() != 0) {
    total_size += 1 + 1;
  }

  // bool b = 5;
  if (this->b() != 0) {
    total_size += 1 + 1;
  }

  // bool trurboA = 6;
  if (this->trurboa() != 0) {
    total_size += 1 + 1;
  }

  // bool trurboB = 7;
  if (this->trurbob() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NESControllerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.nes.NESControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  const NESControllerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NESControllerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.nes.NESControllerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.nes.NESControllerState)
    MergeFrom(*source);
  }
}

void NESControllerState::MergeFrom(const NESControllerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.nes.NESControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dpad()) {
    mutable_dpad()->::org::beachc::deep_thought::common::DPad::MergeFrom(from.dpad());
  }
  if (from.has_player()) {
    mutable_player()->::org::beachc::deep_thought::common::Player::MergeFrom(from.player());
  }
  if (from.select() != 0) {
    set_select(from.select());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.trurboa() != 0) {
    set_trurboa(from.trurboa());
  }
  if (from.trurbob() != 0) {
    set_trurbob(from.trurbob());
  }
}

void NESControllerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.nes.NESControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NESControllerState::CopyFrom(const NESControllerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.nes.NESControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NESControllerState::IsInitialized() const {
  return true;
}

void NESControllerState::Swap(NESControllerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NESControllerState::InternalSwap(NESControllerState* other) {
  std::swap(dpad_, other->dpad_);
  std::swap(player_, other->player_);
  std::swap(select_, other->select_);
  std::swap(start_, other->start_);
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(trurboa_, other->trurboa_);
  std::swap(trurbob_, other->trurbob_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NESControllerState::GetMetadata() const {
  protobuf_nes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NESControllerState

// .org.beachc.deep_thought.common.DPad dpad = 1;
bool NESControllerState::has_dpad() const {
  return this != internal_default_instance() && dpad_ != NULL;
}
void NESControllerState::clear_dpad() {
  if (GetArenaNoVirtual() == NULL && dpad_ != NULL) delete dpad_;
  dpad_ = NULL;
}
const ::org::beachc::deep_thought::common::DPad& NESControllerState::dpad() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESControllerState.dpad)
  return dpad_ != NULL ? *dpad_
                         : *::org::beachc::deep_thought::common::DPad::internal_default_instance();
}
::org::beachc::deep_thought::common::DPad* NESControllerState::mutable_dpad() {
  
  if (dpad_ == NULL) {
    dpad_ = new ::org::beachc::deep_thought::common::DPad;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.nes.NESControllerState.dpad)
  return dpad_;
}
::org::beachc::deep_thought::common::DPad* NESControllerState::release_dpad() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.nes.NESControllerState.dpad)
  
  ::org::beachc::deep_thought::common::DPad* temp = dpad_;
  dpad_ = NULL;
  return temp;
}
void NESControllerState::set_allocated_dpad(::org::beachc::deep_thought::common::DPad* dpad) {
  delete dpad_;
  dpad_ = dpad;
  if (dpad) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.nes.NESControllerState.dpad)
}

// bool select = 2;
void NESControllerState::clear_select() {
  select_ = false;
}
bool NESControllerState::select() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESControllerState.select)
  return select_;
}
void NESControllerState::set_select(bool value) {
  
  select_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NESControllerState.select)
}

// bool start = 3;
void NESControllerState::clear_start() {
  start_ = false;
}
bool NESControllerState::start() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESControllerState.start)
  return start_;
}
void NESControllerState::set_start(bool value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NESControllerState.start)
}

// bool a = 4;
void NESControllerState::clear_a() {
  a_ = false;
}
bool NESControllerState::a() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESControllerState.a)
  return a_;
}
void NESControllerState::set_a(bool value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NESControllerState.a)
}

// bool b = 5;
void NESControllerState::clear_b() {
  b_ = false;
}
bool NESControllerState::b() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESControllerState.b)
  return b_;
}
void NESControllerState::set_b(bool value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NESControllerState.b)
}

// bool trurboA = 6;
void NESControllerState::clear_trurboa() {
  trurboa_ = false;
}
bool NESControllerState::trurboa() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESControllerState.trurboA)
  return trurboa_;
}
void NESControllerState::set_trurboa(bool value) {
  
  trurboa_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NESControllerState.trurboA)
}

// bool trurboB = 7;
void NESControllerState::clear_trurbob() {
  trurbob_ = false;
}
bool NESControllerState::trurbob() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESControllerState.trurboB)
  return trurbob_;
}
void NESControllerState::set_trurbob(bool value) {
  
  trurbob_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NESControllerState.trurboB)
}

// .org.beachc.deep_thought.common.Player player = 8;
bool NESControllerState::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
void NESControllerState::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::org::beachc::deep_thought::common::Player& NESControllerState::player() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NESControllerState.player)
  return player_ != NULL ? *player_
                         : *::org::beachc::deep_thought::common::Player::internal_default_instance();
}
::org::beachc::deep_thought::common::Player* NESControllerState::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::org::beachc::deep_thought::common::Player;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.nes.NESControllerState.player)
  return player_;
}
::org::beachc::deep_thought::common::Player* NESControllerState::release_player() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.nes.NESControllerState.player)
  
  ::org::beachc::deep_thought::common::Player* temp = player_;
  player_ = NULL;
  return temp;
}
void NESControllerState::set_allocated_player(::org::beachc::deep_thought::common::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.nes.NESControllerState.player)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NestopiaControl::kAltspeedFieldNumber;
const int NestopiaControl::kInsertcoin1FieldNumber;
const int NestopiaControl::kInsertcoin2FieldNumber;
const int NestopiaControl::kFdsflipFieldNumber;
const int NestopiaControl::kFdsswitchFieldNumber;
const int NestopiaControl::kQsave1FieldNumber;
const int NestopiaControl::kQsave2FieldNumber;
const int NestopiaControl::kQload1FieldNumber;
const int NestopiaControl::kQload2FieldNumber;
const int NestopiaControl::kScreenshotFieldNumber;
const int NestopiaControl::kResetFieldNumber;
const int NestopiaControl::kRwstartFieldNumber;
const int NestopiaControl::kRwstopFieldNumber;
const int NestopiaControl::kFullscreenFieldNumber;
const int NestopiaControl::kFilterFieldNumber;
const int NestopiaControl::kScalefactorFieldNumber;
const int NestopiaControl::kQuitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NestopiaControl::NestopiaControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_nes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.nes.NestopiaControl)
}
NestopiaControl::NestopiaControl(const NestopiaControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&altspeed_, &from.altspeed_,
    reinterpret_cast<char*>(&quit_) -
    reinterpret_cast<char*>(&altspeed_) + sizeof(quit_));
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.nes.NestopiaControl)
}

void NestopiaControl::SharedCtor() {
  ::memset(&altspeed_, 0, reinterpret_cast<char*>(&quit_) -
    reinterpret_cast<char*>(&altspeed_) + sizeof(quit_));
  _cached_size_ = 0;
}

NestopiaControl::~NestopiaControl() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.nes.NestopiaControl)
  SharedDtor();
}

void NestopiaControl::SharedDtor() {
}

void NestopiaControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NestopiaControl::descriptor() {
  protobuf_nes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NestopiaControl& NestopiaControl::default_instance() {
  protobuf_nes_2eproto::InitDefaults();
  return *internal_default_instance();
}

NestopiaControl* NestopiaControl::New(::google::protobuf::Arena* arena) const {
  NestopiaControl* n = new NestopiaControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NestopiaControl::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.nes.NestopiaControl)
  ::memset(&altspeed_, 0, reinterpret_cast<char*>(&quit_) -
    reinterpret_cast<char*>(&altspeed_) + sizeof(quit_));
}

bool NestopiaControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.nes.NestopiaControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool altspeed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &altspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool insertcoin1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &insertcoin1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool insertcoin2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &insertcoin2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fdsflip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fdsflip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fdsswitch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fdsswitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool qsave1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qsave1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool qsave2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qsave2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool qload1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qload1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool qload2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qload2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool screenshot = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &screenshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rwstart = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rwstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rwstop = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rwstop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fullscreen = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fullscreen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool filter = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool scalefactor = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scalefactor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool quit = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.nes.NestopiaControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.nes.NestopiaControl)
  return false;
#undef DO_
}

void NestopiaControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.nes.NestopiaControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool altspeed = 1;
  if (this->altspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->altspeed(), output);
  }

  // bool insertcoin1 = 2;
  if (this->insertcoin1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->insertcoin1(), output);
  }

  // bool insertcoin2 = 3;
  if (this->insertcoin2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->insertcoin2(), output);
  }

  // bool fdsflip = 4;
  if (this->fdsflip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fdsflip(), output);
  }

  // bool fdsswitch = 5;
  if (this->fdsswitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fdsswitch(), output);
  }

  // bool qsave1 = 6;
  if (this->qsave1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->qsave1(), output);
  }

  // bool qsave2 = 7;
  if (this->qsave2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->qsave2(), output);
  }

  // bool qload1 = 8;
  if (this->qload1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->qload1(), output);
  }

  // bool qload2 = 9;
  if (this->qload2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->qload2(), output);
  }

  // bool screenshot = 10;
  if (this->screenshot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->screenshot(), output);
  }

  // bool reset = 11;
  if (this->reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->reset(), output);
  }

  // bool rwstart = 12;
  if (this->rwstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->rwstart(), output);
  }

  // bool rwstop = 13;
  if (this->rwstop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->rwstop(), output);
  }

  // bool fullscreen = 14;
  if (this->fullscreen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->fullscreen(), output);
  }

  // bool filter = 15;
  if (this->filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->filter(), output);
  }

  // bool scalefactor = 16;
  if (this->scalefactor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->scalefactor(), output);
  }

  // bool quit = 17;
  if (this->quit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->quit(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.nes.NestopiaControl)
}

::google::protobuf::uint8* NestopiaControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.nes.NestopiaControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool altspeed = 1;
  if (this->altspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->altspeed(), target);
  }

  // bool insertcoin1 = 2;
  if (this->insertcoin1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->insertcoin1(), target);
  }

  // bool insertcoin2 = 3;
  if (this->insertcoin2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->insertcoin2(), target);
  }

  // bool fdsflip = 4;
  if (this->fdsflip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fdsflip(), target);
  }

  // bool fdsswitch = 5;
  if (this->fdsswitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fdsswitch(), target);
  }

  // bool qsave1 = 6;
  if (this->qsave1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->qsave1(), target);
  }

  // bool qsave2 = 7;
  if (this->qsave2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->qsave2(), target);
  }

  // bool qload1 = 8;
  if (this->qload1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->qload1(), target);
  }

  // bool qload2 = 9;
  if (this->qload2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->qload2(), target);
  }

  // bool screenshot = 10;
  if (this->screenshot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->screenshot(), target);
  }

  // bool reset = 11;
  if (this->reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->reset(), target);
  }

  // bool rwstart = 12;
  if (this->rwstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->rwstart(), target);
  }

  // bool rwstop = 13;
  if (this->rwstop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->rwstop(), target);
  }

  // bool fullscreen = 14;
  if (this->fullscreen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->fullscreen(), target);
  }

  // bool filter = 15;
  if (this->filter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->filter(), target);
  }

  // bool scalefactor = 16;
  if (this->scalefactor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->scalefactor(), target);
  }

  // bool quit = 17;
  if (this->quit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->quit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.nes.NestopiaControl)
  return target;
}

size_t NestopiaControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.nes.NestopiaControl)
  size_t total_size = 0;

  // bool altspeed = 1;
  if (this->altspeed() != 0) {
    total_size += 1 + 1;
  }

  // bool insertcoin1 = 2;
  if (this->insertcoin1() != 0) {
    total_size += 1 + 1;
  }

  // bool insertcoin2 = 3;
  if (this->insertcoin2() != 0) {
    total_size += 1 + 1;
  }

  // bool fdsflip = 4;
  if (this->fdsflip() != 0) {
    total_size += 1 + 1;
  }

  // bool fdsswitch = 5;
  if (this->fdsswitch() != 0) {
    total_size += 1 + 1;
  }

  // bool qsave1 = 6;
  if (this->qsave1() != 0) {
    total_size += 1 + 1;
  }

  // bool qsave2 = 7;
  if (this->qsave2() != 0) {
    total_size += 1 + 1;
  }

  // bool qload1 = 8;
  if (this->qload1() != 0) {
    total_size += 1 + 1;
  }

  // bool qload2 = 9;
  if (this->qload2() != 0) {
    total_size += 1 + 1;
  }

  // bool screenshot = 10;
  if (this->screenshot() != 0) {
    total_size += 1 + 1;
  }

  // bool reset = 11;
  if (this->reset() != 0) {
    total_size += 1 + 1;
  }

  // bool rwstart = 12;
  if (this->rwstart() != 0) {
    total_size += 1 + 1;
  }

  // bool rwstop = 13;
  if (this->rwstop() != 0) {
    total_size += 1 + 1;
  }

  // bool fullscreen = 14;
  if (this->fullscreen() != 0) {
    total_size += 1 + 1;
  }

  // bool filter = 15;
  if (this->filter() != 0) {
    total_size += 1 + 1;
  }

  // bool scalefactor = 16;
  if (this->scalefactor() != 0) {
    total_size += 2 + 1;
  }

  // bool quit = 17;
  if (this->quit() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NestopiaControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.nes.NestopiaControl)
  GOOGLE_DCHECK_NE(&from, this);
  const NestopiaControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NestopiaControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.nes.NestopiaControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.nes.NestopiaControl)
    MergeFrom(*source);
  }
}

void NestopiaControl::MergeFrom(const NestopiaControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.nes.NestopiaControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.altspeed() != 0) {
    set_altspeed(from.altspeed());
  }
  if (from.insertcoin1() != 0) {
    set_insertcoin1(from.insertcoin1());
  }
  if (from.insertcoin2() != 0) {
    set_insertcoin2(from.insertcoin2());
  }
  if (from.fdsflip() != 0) {
    set_fdsflip(from.fdsflip());
  }
  if (from.fdsswitch() != 0) {
    set_fdsswitch(from.fdsswitch());
  }
  if (from.qsave1() != 0) {
    set_qsave1(from.qsave1());
  }
  if (from.qsave2() != 0) {
    set_qsave2(from.qsave2());
  }
  if (from.qload1() != 0) {
    set_qload1(from.qload1());
  }
  if (from.qload2() != 0) {
    set_qload2(from.qload2());
  }
  if (from.screenshot() != 0) {
    set_screenshot(from.screenshot());
  }
  if (from.reset() != 0) {
    set_reset(from.reset());
  }
  if (from.rwstart() != 0) {
    set_rwstart(from.rwstart());
  }
  if (from.rwstop() != 0) {
    set_rwstop(from.rwstop());
  }
  if (from.fullscreen() != 0) {
    set_fullscreen(from.fullscreen());
  }
  if (from.filter() != 0) {
    set_filter(from.filter());
  }
  if (from.scalefactor() != 0) {
    set_scalefactor(from.scalefactor());
  }
  if (from.quit() != 0) {
    set_quit(from.quit());
  }
}

void NestopiaControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.nes.NestopiaControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestopiaControl::CopyFrom(const NestopiaControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.nes.NestopiaControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestopiaControl::IsInitialized() const {
  return true;
}

void NestopiaControl::Swap(NestopiaControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NestopiaControl::InternalSwap(NestopiaControl* other) {
  std::swap(altspeed_, other->altspeed_);
  std::swap(insertcoin1_, other->insertcoin1_);
  std::swap(insertcoin2_, other->insertcoin2_);
  std::swap(fdsflip_, other->fdsflip_);
  std::swap(fdsswitch_, other->fdsswitch_);
  std::swap(qsave1_, other->qsave1_);
  std::swap(qsave2_, other->qsave2_);
  std::swap(qload1_, other->qload1_);
  std::swap(qload2_, other->qload2_);
  std::swap(screenshot_, other->screenshot_);
  std::swap(reset_, other->reset_);
  std::swap(rwstart_, other->rwstart_);
  std::swap(rwstop_, other->rwstop_);
  std::swap(fullscreen_, other->fullscreen_);
  std::swap(filter_, other->filter_);
  std::swap(scalefactor_, other->scalefactor_);
  std::swap(quit_, other->quit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NestopiaControl::GetMetadata() const {
  protobuf_nes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NestopiaControl

// bool altspeed = 1;
void NestopiaControl::clear_altspeed() {
  altspeed_ = false;
}
bool NestopiaControl::altspeed() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.altspeed)
  return altspeed_;
}
void NestopiaControl::set_altspeed(bool value) {
  
  altspeed_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.altspeed)
}

// bool insertcoin1 = 2;
void NestopiaControl::clear_insertcoin1() {
  insertcoin1_ = false;
}
bool NestopiaControl::insertcoin1() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.insertcoin1)
  return insertcoin1_;
}
void NestopiaControl::set_insertcoin1(bool value) {
  
  insertcoin1_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.insertcoin1)
}

// bool insertcoin2 = 3;
void NestopiaControl::clear_insertcoin2() {
  insertcoin2_ = false;
}
bool NestopiaControl::insertcoin2() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.insertcoin2)
  return insertcoin2_;
}
void NestopiaControl::set_insertcoin2(bool value) {
  
  insertcoin2_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.insertcoin2)
}

// bool fdsflip = 4;
void NestopiaControl::clear_fdsflip() {
  fdsflip_ = false;
}
bool NestopiaControl::fdsflip() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.fdsflip)
  return fdsflip_;
}
void NestopiaControl::set_fdsflip(bool value) {
  
  fdsflip_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.fdsflip)
}

// bool fdsswitch = 5;
void NestopiaControl::clear_fdsswitch() {
  fdsswitch_ = false;
}
bool NestopiaControl::fdsswitch() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.fdsswitch)
  return fdsswitch_;
}
void NestopiaControl::set_fdsswitch(bool value) {
  
  fdsswitch_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.fdsswitch)
}

// bool qsave1 = 6;
void NestopiaControl::clear_qsave1() {
  qsave1_ = false;
}
bool NestopiaControl::qsave1() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.qsave1)
  return qsave1_;
}
void NestopiaControl::set_qsave1(bool value) {
  
  qsave1_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.qsave1)
}

// bool qsave2 = 7;
void NestopiaControl::clear_qsave2() {
  qsave2_ = false;
}
bool NestopiaControl::qsave2() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.qsave2)
  return qsave2_;
}
void NestopiaControl::set_qsave2(bool value) {
  
  qsave2_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.qsave2)
}

// bool qload1 = 8;
void NestopiaControl::clear_qload1() {
  qload1_ = false;
}
bool NestopiaControl::qload1() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.qload1)
  return qload1_;
}
void NestopiaControl::set_qload1(bool value) {
  
  qload1_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.qload1)
}

// bool qload2 = 9;
void NestopiaControl::clear_qload2() {
  qload2_ = false;
}
bool NestopiaControl::qload2() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.qload2)
  return qload2_;
}
void NestopiaControl::set_qload2(bool value) {
  
  qload2_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.qload2)
}

// bool screenshot = 10;
void NestopiaControl::clear_screenshot() {
  screenshot_ = false;
}
bool NestopiaControl::screenshot() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.screenshot)
  return screenshot_;
}
void NestopiaControl::set_screenshot(bool value) {
  
  screenshot_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.screenshot)
}

// bool reset = 11;
void NestopiaControl::clear_reset() {
  reset_ = false;
}
bool NestopiaControl::reset() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.reset)
  return reset_;
}
void NestopiaControl::set_reset(bool value) {
  
  reset_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.reset)
}

// bool rwstart = 12;
void NestopiaControl::clear_rwstart() {
  rwstart_ = false;
}
bool NestopiaControl::rwstart() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.rwstart)
  return rwstart_;
}
void NestopiaControl::set_rwstart(bool value) {
  
  rwstart_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.rwstart)
}

// bool rwstop = 13;
void NestopiaControl::clear_rwstop() {
  rwstop_ = false;
}
bool NestopiaControl::rwstop() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.rwstop)
  return rwstop_;
}
void NestopiaControl::set_rwstop(bool value) {
  
  rwstop_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.rwstop)
}

// bool fullscreen = 14;
void NestopiaControl::clear_fullscreen() {
  fullscreen_ = false;
}
bool NestopiaControl::fullscreen() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.fullscreen)
  return fullscreen_;
}
void NestopiaControl::set_fullscreen(bool value) {
  
  fullscreen_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.fullscreen)
}

// bool filter = 15;
void NestopiaControl::clear_filter() {
  filter_ = false;
}
bool NestopiaControl::filter() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.filter)
  return filter_;
}
void NestopiaControl::set_filter(bool value) {
  
  filter_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.filter)
}

// bool scalefactor = 16;
void NestopiaControl::clear_scalefactor() {
  scalefactor_ = false;
}
bool NestopiaControl::scalefactor() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.scalefactor)
  return scalefactor_;
}
void NestopiaControl::set_scalefactor(bool value) {
  
  scalefactor_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.scalefactor)
}

// bool quit = 17;
void NestopiaControl::clear_quit() {
  quit_ = false;
}
bool NestopiaControl::quit() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.nes.NestopiaControl.quit)
  return quit_;
}
void NestopiaControl::set_quit(bool value) {
  
  quit_ = value;
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.nes.NestopiaControl.quit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace nes
}  // namespace deep_thought
}  // namespace beachc
}  // namespace org

// @@protoc_insertion_point(global_scope)
