// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deep_thought.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "deep_thought.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace beachc {
namespace deep_thought {
class VideoFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoFrame> {
  public:
  const ::org::beachc::deep_thought::RawRGB32* raw_frame_;
  const ::org::beachc::deep_thought::SpriteList* sprite_list_;
  const ::org::beachc::deep_thought::RegionGraph* region_graph_;
} _VideoFrame_default_instance_;
class MachineStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MachineState> {
  public:
  const ::org::beachc::deep_thought::nes::NESConsoleState* nes_console_state_;
} _MachineState_default_instance_;
class RawRGB32DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RawRGB32> {
} _RawRGB32_default_instance_;
class SpriteListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpriteList> {
} _SpriteList_default_instance_;
class SpriteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sprite> {
} _Sprite_default_instance_;
class RegionGraphDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegionGraph> {
} _RegionGraph_default_instance_;

namespace protobuf_deep_5fthought_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_VideoFrame_default_instance_), raw_frame_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_VideoFrame_default_instance_), sprite_list_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_VideoFrame_default_instance_), region_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, machine_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineState, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineState, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MachineState_default_instance_), nes_console_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineState, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRGB32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRGB32, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRGB32, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteList, sprites_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, shape_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(VideoFrame)},
  { 10, -1, sizeof(MachineState)},
  { 17, -1, sizeof(RawRGB32)},
  { 24, -1, sizeof(SpriteList)},
  { 30, -1, sizeof(Sprite)},
  { 36, -1, sizeof(RegionGraph)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MachineState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RawRGB32_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpriteList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sprite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionGraph_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "deep_thought.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _VideoFrame_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MachineState_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RawRGB32_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SpriteList_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Sprite_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _RegionGraph_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::org::beachc::deep_thought::common::protobuf_common_2eproto::InitDefaults();
  ::org::beachc::deep_thought::nes::protobuf_nes_2eproto::InitDefaults();
  _VideoFrame_default_instance_.DefaultConstruct();
  _MachineState_default_instance_.DefaultConstruct();
  _RawRGB32_default_instance_.DefaultConstruct();
  _SpriteList_default_instance_.DefaultConstruct();
  _Sprite_default_instance_.DefaultConstruct();
  _RegionGraph_default_instance_.DefaultConstruct();
  _VideoFrame_default_instance_.raw_frame_ = const_cast< ::org::beachc::deep_thought::RawRGB32*>(
      ::org::beachc::deep_thought::RawRGB32::internal_default_instance());
  _VideoFrame_default_instance_.sprite_list_ = const_cast< ::org::beachc::deep_thought::SpriteList*>(
      ::org::beachc::deep_thought::SpriteList::internal_default_instance());
  _VideoFrame_default_instance_.region_graph_ = const_cast< ::org::beachc::deep_thought::RegionGraph*>(
      ::org::beachc::deep_thought::RegionGraph::internal_default_instance());
  _VideoFrame_default_instance_.get_mutable()->machine_state_ = const_cast< ::org::beachc::deep_thought::MachineState*>(
      ::org::beachc::deep_thought::MachineState::internal_default_instance());
  _MachineState_default_instance_.nes_console_state_ = const_cast< ::org::beachc::deep_thought::nes::NESConsoleState*>(
      ::org::beachc::deep_thought::nes::NESConsoleState::internal_default_instance());
  _RawRGB32_default_instance_.get_mutable()->shape_ = const_cast< ::org::beachc::deep_thought::common::Shape*>(
      ::org::beachc::deep_thought::common::Shape::internal_default_instance());
  _Sprite_default_instance_.get_mutable()->shape_ = const_cast< ::org::beachc::deep_thought::common::Shape*>(
      ::org::beachc::deep_thought::common::Shape::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022deep_thought.proto\022\027org.beachc.deep_th"
      "ought\032\014common.proto\032\tnes.proto\"\204\002\n\nVideo"
      "Frame\0226\n\traw_frame\030\001 \001(\0132!.org.beachc.de"
      "ep_thought.RawRGB32H\000\022:\n\013sprite_list\030\002 \001"
      "(\0132#.org.beachc.deep_thought.SpriteListH"
      "\000\022<\n\014region_graph\030\003 \001(\0132$.org.beachc.dee"
      "p_thought.RegionGraphH\000\022<\n\rmachine_state"
      "\030\004 \001(\0132%.org.beachc.deep_thought.Machine"
      "StateB\006\n\004data\"b\n\014MachineState\022I\n\021nes_con"
      "sole_state\030\001 \001(\0132,.org.beachc.deep_thoug"
      "ht.nes.NESConsoleStateH\000B\007\n\005state\"N\n\010Raw"
      "RGB32\0224\n\005shape\030\001 \001(\0132%.org.beachc.deep_t"
      "hought.common.Shape\022\014\n\004data\030\002 \001(\014\">\n\nSpr"
      "iteList\0220\n\007sprites\030\001 \003(\0132\037.org.beachc.de"
      "ep_thought.Sprite\">\n\006Sprite\0224\n\005shape\030\001 \001"
      "(\0132%.org.beachc.deep_thought.common.Shap"
      "e\"\r\n\013RegionGraph2h\n\010Emulator\022\\\n\ninitiali"
      "ze\022%.org.beachc.deep_thought.MachineStat"
      "e\032#.org.beachc.deep_thought.VideoFrame(\001"
      "0\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 770);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "deep_thought.proto", &protobuf_RegisterTypes);
  ::org::beachc::deep_thought::common::protobuf_common_2eproto::AddDescriptors();
  ::org::beachc::deep_thought::nes::protobuf_nes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_deep_5fthought_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoFrame::kRawFrameFieldNumber;
const int VideoFrame::kSpriteListFieldNumber;
const int VideoFrame::kRegionGraphFieldNumber;
const int VideoFrame::kMachineStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoFrame::VideoFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deep_5fthought_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.VideoFrame)
}
VideoFrame::VideoFrame(const VideoFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_machine_state()) {
    machine_state_ = new ::org::beachc::deep_thought::MachineState(*from.machine_state_);
  } else {
    machine_state_ = NULL;
  }
  clear_has_data();
  switch (from.data_case()) {
    case kRawFrame: {
      mutable_raw_frame()->::org::beachc::deep_thought::RawRGB32::MergeFrom(from.raw_frame());
      break;
    }
    case kSpriteList: {
      mutable_sprite_list()->::org::beachc::deep_thought::SpriteList::MergeFrom(from.sprite_list());
      break;
    }
    case kRegionGraph: {
      mutable_region_graph()->::org::beachc::deep_thought::RegionGraph::MergeFrom(from.region_graph());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.VideoFrame)
}

void VideoFrame::SharedCtor() {
  machine_state_ = NULL;
  clear_has_data();
  _cached_size_ = 0;
}

VideoFrame::~VideoFrame() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.VideoFrame)
  SharedDtor();
}

void VideoFrame::SharedDtor() {
  if (this != internal_default_instance()) {
    delete machine_state_;
  }
  if (has_data()) {
    clear_data();
  }
}

void VideoFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoFrame::descriptor() {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoFrame& VideoFrame::default_instance() {
  protobuf_deep_5fthought_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoFrame* VideoFrame::New(::google::protobuf::Arena* arena) const {
  VideoFrame* n = new VideoFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoFrame::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:org.beachc.deep_thought.VideoFrame)
  switch (data_case()) {
    case kRawFrame: {
      delete data_.raw_frame_;
      break;
    }
    case kSpriteList: {
      delete data_.sprite_list_;
      break;
    }
    case kRegionGraph: {
      delete data_.region_graph_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void VideoFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.VideoFrame)
  if (GetArenaNoVirtual() == NULL && machine_state_ != NULL) {
    delete machine_state_;
  }
  machine_state_ = NULL;
  clear_data();
}

bool VideoFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.VideoFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.beachc.deep_thought.RawRGB32 raw_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raw_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.beachc.deep_thought.SpriteList sprite_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sprite_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.beachc.deep_thought.RegionGraph region_graph = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.beachc.deep_thought.MachineState machine_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.VideoFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.VideoFrame)
  return false;
#undef DO_
}

void VideoFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.VideoFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.RawRGB32 raw_frame = 1;
  if (has_raw_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *data_.raw_frame_, output);
  }

  // .org.beachc.deep_thought.SpriteList sprite_list = 2;
  if (has_sprite_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *data_.sprite_list_, output);
  }

  // .org.beachc.deep_thought.RegionGraph region_graph = 3;
  if (has_region_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *data_.region_graph_, output);
  }

  // .org.beachc.deep_thought.MachineState machine_state = 4;
  if (this->has_machine_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->machine_state_, output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.VideoFrame)
}

::google::protobuf::uint8* VideoFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.VideoFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.RawRGB32 raw_frame = 1;
  if (has_raw_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *data_.raw_frame_, deterministic, target);
  }

  // .org.beachc.deep_thought.SpriteList sprite_list = 2;
  if (has_sprite_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *data_.sprite_list_, deterministic, target);
  }

  // .org.beachc.deep_thought.RegionGraph region_graph = 3;
  if (has_region_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *data_.region_graph_, deterministic, target);
  }

  // .org.beachc.deep_thought.MachineState machine_state = 4;
  if (this->has_machine_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->machine_state_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.VideoFrame)
  return target;
}

size_t VideoFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.VideoFrame)
  size_t total_size = 0;

  // .org.beachc.deep_thought.MachineState machine_state = 4;
  if (this->has_machine_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->machine_state_);
  }

  switch (data_case()) {
    // .org.beachc.deep_thought.RawRGB32 raw_frame = 1;
    case kRawFrame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.raw_frame_);
      break;
    }
    // .org.beachc.deep_thought.SpriteList sprite_list = 2;
    case kSpriteList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.sprite_list_);
      break;
    }
    // .org.beachc.deep_thought.RegionGraph region_graph = 3;
    case kRegionGraph: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.region_graph_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.VideoFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.VideoFrame)
    MergeFrom(*source);
  }
}

void VideoFrame::MergeFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_machine_state()) {
    mutable_machine_state()->::org::beachc::deep_thought::MachineState::MergeFrom(from.machine_state());
  }
  switch (from.data_case()) {
    case kRawFrame: {
      mutable_raw_frame()->::org::beachc::deep_thought::RawRGB32::MergeFrom(from.raw_frame());
      break;
    }
    case kSpriteList: {
      mutable_sprite_list()->::org::beachc::deep_thought::SpriteList::MergeFrom(from.sprite_list());
      break;
    }
    case kRegionGraph: {
      mutable_region_graph()->::org::beachc::deep_thought::RegionGraph::MergeFrom(from.region_graph());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void VideoFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFrame::CopyFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFrame::IsInitialized() const {
  return true;
}

void VideoFrame::Swap(VideoFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoFrame::InternalSwap(VideoFrame* other) {
  std::swap(machine_state_, other->machine_state_);
  std::swap(data_, other->data_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoFrame::GetMetadata() const {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoFrame

// .org.beachc.deep_thought.RawRGB32 raw_frame = 1;
bool VideoFrame::has_raw_frame() const {
  return data_case() == kRawFrame;
}
void VideoFrame::set_has_raw_frame() {
  _oneof_case_[0] = kRawFrame;
}
void VideoFrame::clear_raw_frame() {
  if (has_raw_frame()) {
    delete data_.raw_frame_;
    clear_has_data();
  }
}
 const ::org::beachc::deep_thought::RawRGB32& VideoFrame::raw_frame() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.VideoFrame.raw_frame)
  return has_raw_frame()
      ? *data_.raw_frame_
      : ::org::beachc::deep_thought::RawRGB32::default_instance();
}
::org::beachc::deep_thought::RawRGB32* VideoFrame::mutable_raw_frame() {
  if (!has_raw_frame()) {
    clear_data();
    set_has_raw_frame();
    data_.raw_frame_ = new ::org::beachc::deep_thought::RawRGB32;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.VideoFrame.raw_frame)
  return data_.raw_frame_;
}
::org::beachc::deep_thought::RawRGB32* VideoFrame::release_raw_frame() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.VideoFrame.raw_frame)
  if (has_raw_frame()) {
    clear_has_data();
    ::org::beachc::deep_thought::RawRGB32* temp = data_.raw_frame_;
    data_.raw_frame_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void VideoFrame::set_allocated_raw_frame(::org::beachc::deep_thought::RawRGB32* raw_frame) {
  clear_data();
  if (raw_frame) {
    set_has_raw_frame();
    data_.raw_frame_ = raw_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.VideoFrame.raw_frame)
}

// .org.beachc.deep_thought.SpriteList sprite_list = 2;
bool VideoFrame::has_sprite_list() const {
  return data_case() == kSpriteList;
}
void VideoFrame::set_has_sprite_list() {
  _oneof_case_[0] = kSpriteList;
}
void VideoFrame::clear_sprite_list() {
  if (has_sprite_list()) {
    delete data_.sprite_list_;
    clear_has_data();
  }
}
 const ::org::beachc::deep_thought::SpriteList& VideoFrame::sprite_list() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.VideoFrame.sprite_list)
  return has_sprite_list()
      ? *data_.sprite_list_
      : ::org::beachc::deep_thought::SpriteList::default_instance();
}
::org::beachc::deep_thought::SpriteList* VideoFrame::mutable_sprite_list() {
  if (!has_sprite_list()) {
    clear_data();
    set_has_sprite_list();
    data_.sprite_list_ = new ::org::beachc::deep_thought::SpriteList;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.VideoFrame.sprite_list)
  return data_.sprite_list_;
}
::org::beachc::deep_thought::SpriteList* VideoFrame::release_sprite_list() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.VideoFrame.sprite_list)
  if (has_sprite_list()) {
    clear_has_data();
    ::org::beachc::deep_thought::SpriteList* temp = data_.sprite_list_;
    data_.sprite_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void VideoFrame::set_allocated_sprite_list(::org::beachc::deep_thought::SpriteList* sprite_list) {
  clear_data();
  if (sprite_list) {
    set_has_sprite_list();
    data_.sprite_list_ = sprite_list;
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.VideoFrame.sprite_list)
}

// .org.beachc.deep_thought.RegionGraph region_graph = 3;
bool VideoFrame::has_region_graph() const {
  return data_case() == kRegionGraph;
}
void VideoFrame::set_has_region_graph() {
  _oneof_case_[0] = kRegionGraph;
}
void VideoFrame::clear_region_graph() {
  if (has_region_graph()) {
    delete data_.region_graph_;
    clear_has_data();
  }
}
 const ::org::beachc::deep_thought::RegionGraph& VideoFrame::region_graph() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.VideoFrame.region_graph)
  return has_region_graph()
      ? *data_.region_graph_
      : ::org::beachc::deep_thought::RegionGraph::default_instance();
}
::org::beachc::deep_thought::RegionGraph* VideoFrame::mutable_region_graph() {
  if (!has_region_graph()) {
    clear_data();
    set_has_region_graph();
    data_.region_graph_ = new ::org::beachc::deep_thought::RegionGraph;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.VideoFrame.region_graph)
  return data_.region_graph_;
}
::org::beachc::deep_thought::RegionGraph* VideoFrame::release_region_graph() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.VideoFrame.region_graph)
  if (has_region_graph()) {
    clear_has_data();
    ::org::beachc::deep_thought::RegionGraph* temp = data_.region_graph_;
    data_.region_graph_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void VideoFrame::set_allocated_region_graph(::org::beachc::deep_thought::RegionGraph* region_graph) {
  clear_data();
  if (region_graph) {
    set_has_region_graph();
    data_.region_graph_ = region_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.VideoFrame.region_graph)
}

// .org.beachc.deep_thought.MachineState machine_state = 4;
bool VideoFrame::has_machine_state() const {
  return this != internal_default_instance() && machine_state_ != NULL;
}
void VideoFrame::clear_machine_state() {
  if (GetArenaNoVirtual() == NULL && machine_state_ != NULL) delete machine_state_;
  machine_state_ = NULL;
}
const ::org::beachc::deep_thought::MachineState& VideoFrame::machine_state() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.VideoFrame.machine_state)
  return machine_state_ != NULL ? *machine_state_
                         : *::org::beachc::deep_thought::MachineState::internal_default_instance();
}
::org::beachc::deep_thought::MachineState* VideoFrame::mutable_machine_state() {
  
  if (machine_state_ == NULL) {
    machine_state_ = new ::org::beachc::deep_thought::MachineState;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.VideoFrame.machine_state)
  return machine_state_;
}
::org::beachc::deep_thought::MachineState* VideoFrame::release_machine_state() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.VideoFrame.machine_state)
  
  ::org::beachc::deep_thought::MachineState* temp = machine_state_;
  machine_state_ = NULL;
  return temp;
}
void VideoFrame::set_allocated_machine_state(::org::beachc::deep_thought::MachineState* machine_state) {
  delete machine_state_;
  machine_state_ = machine_state;
  if (machine_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.VideoFrame.machine_state)
}

bool VideoFrame::has_data() const {
  return data_case() != DATA_NOT_SET;
}
void VideoFrame::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
VideoFrame::DataCase VideoFrame::data_case() const {
  return VideoFrame::DataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachineState::kNesConsoleStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachineState::MachineState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deep_5fthought_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.MachineState)
}
MachineState::MachineState(const MachineState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_state();
  switch (from.state_case()) {
    case kNesConsoleState: {
      mutable_nes_console_state()->::org::beachc::deep_thought::nes::NESConsoleState::MergeFrom(from.nes_console_state());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.MachineState)
}

void MachineState::SharedCtor() {
  clear_has_state();
  _cached_size_ = 0;
}

MachineState::~MachineState() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.MachineState)
  SharedDtor();
}

void MachineState::SharedDtor() {
  if (has_state()) {
    clear_state();
  }
}

void MachineState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineState::descriptor() {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MachineState& MachineState::default_instance() {
  protobuf_deep_5fthought_2eproto::InitDefaults();
  return *internal_default_instance();
}

MachineState* MachineState::New(::google::protobuf::Arena* arena) const {
  MachineState* n = new MachineState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MachineState::clear_state() {
// @@protoc_insertion_point(one_of_clear_start:org.beachc.deep_thought.MachineState)
  switch (state_case()) {
    case kNesConsoleState: {
      delete state_.nes_console_state_;
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_NOT_SET;
}


void MachineState::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.MachineState)
  clear_state();
}

bool MachineState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.MachineState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.beachc.deep_thought.nes.NESConsoleState nes_console_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nes_console_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.MachineState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.MachineState)
  return false;
#undef DO_
}

void MachineState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.MachineState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.nes.NESConsoleState nes_console_state = 1;
  if (has_nes_console_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *state_.nes_console_state_, output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.MachineState)
}

::google::protobuf::uint8* MachineState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.MachineState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.nes.NESConsoleState nes_console_state = 1;
  if (has_nes_console_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *state_.nes_console_state_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.MachineState)
  return target;
}

size_t MachineState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.MachineState)
  size_t total_size = 0;

  switch (state_case()) {
    // .org.beachc.deep_thought.nes.NESConsoleState nes_console_state = 1;
    case kNesConsoleState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *state_.nes_console_state_);
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.MachineState)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MachineState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.MachineState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.MachineState)
    MergeFrom(*source);
  }
}

void MachineState::MergeFrom(const MachineState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.MachineState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.state_case()) {
    case kNesConsoleState: {
      mutable_nes_console_state()->::org::beachc::deep_thought::nes::NESConsoleState::MergeFrom(from.nes_console_state());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
}

void MachineState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.MachineState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineState::CopyFrom(const MachineState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.MachineState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineState::IsInitialized() const {
  return true;
}

void MachineState::Swap(MachineState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MachineState::InternalSwap(MachineState* other) {
  std::swap(state_, other->state_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MachineState::GetMetadata() const {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MachineState

// .org.beachc.deep_thought.nes.NESConsoleState nes_console_state = 1;
bool MachineState::has_nes_console_state() const {
  return state_case() == kNesConsoleState;
}
void MachineState::set_has_nes_console_state() {
  _oneof_case_[0] = kNesConsoleState;
}
void MachineState::clear_nes_console_state() {
  if (has_nes_console_state()) {
    delete state_.nes_console_state_;
    clear_has_state();
  }
}
 const ::org::beachc::deep_thought::nes::NESConsoleState& MachineState::nes_console_state() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.MachineState.nes_console_state)
  return has_nes_console_state()
      ? *state_.nes_console_state_
      : ::org::beachc::deep_thought::nes::NESConsoleState::default_instance();
}
::org::beachc::deep_thought::nes::NESConsoleState* MachineState::mutable_nes_console_state() {
  if (!has_nes_console_state()) {
    clear_state();
    set_has_nes_console_state();
    state_.nes_console_state_ = new ::org::beachc::deep_thought::nes::NESConsoleState;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.MachineState.nes_console_state)
  return state_.nes_console_state_;
}
::org::beachc::deep_thought::nes::NESConsoleState* MachineState::release_nes_console_state() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.MachineState.nes_console_state)
  if (has_nes_console_state()) {
    clear_has_state();
    ::org::beachc::deep_thought::nes::NESConsoleState* temp = state_.nes_console_state_;
    state_.nes_console_state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MachineState::set_allocated_nes_console_state(::org::beachc::deep_thought::nes::NESConsoleState* nes_console_state) {
  clear_state();
  if (nes_console_state) {
    set_has_nes_console_state();
    state_.nes_console_state_ = nes_console_state;
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.MachineState.nes_console_state)
}

bool MachineState::has_state() const {
  return state_case() != STATE_NOT_SET;
}
void MachineState::clear_has_state() {
  _oneof_case_[0] = STATE_NOT_SET;
}
MachineState::StateCase MachineState::state_case() const {
  return MachineState::StateCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawRGB32::kShapeFieldNumber;
const int RawRGB32::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawRGB32::RawRGB32()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deep_5fthought_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.RawRGB32)
}
RawRGB32::RawRGB32(const RawRGB32& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_shape()) {
    shape_ = new ::org::beachc::deep_thought::common::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.RawRGB32)
}

void RawRGB32::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_ = NULL;
  _cached_size_ = 0;
}

RawRGB32::~RawRGB32() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.RawRGB32)
  SharedDtor();
}

void RawRGB32::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void RawRGB32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawRGB32::descriptor() {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RawRGB32& RawRGB32::default_instance() {
  protobuf_deep_5fthought_2eproto::InitDefaults();
  return *internal_default_instance();
}

RawRGB32* RawRGB32::New(::google::protobuf::Arena* arena) const {
  RawRGB32* n = new RawRGB32;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawRGB32::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.RawRGB32)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}

bool RawRGB32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.RawRGB32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.beachc.deep_thought.common.Shape shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.RawRGB32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.RawRGB32)
  return false;
#undef DO_
}

void RawRGB32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.RawRGB32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.common.Shape shape = 1;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.RawRGB32)
}

::google::protobuf::uint8* RawRGB32::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.RawRGB32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.common.Shape shape = 1;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, deterministic, target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.RawRGB32)
  return target;
}

size_t RawRGB32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.RawRGB32)
  size_t total_size = 0;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .org.beachc.deep_thought.common.Shape shape = 1;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawRGB32::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.RawRGB32)
  GOOGLE_DCHECK_NE(&from, this);
  const RawRGB32* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawRGB32>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.RawRGB32)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.RawRGB32)
    MergeFrom(*source);
  }
}

void RawRGB32::MergeFrom(const RawRGB32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.RawRGB32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_shape()) {
    mutable_shape()->::org::beachc::deep_thought::common::Shape::MergeFrom(from.shape());
  }
}

void RawRGB32::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.RawRGB32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawRGB32::CopyFrom(const RawRGB32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.RawRGB32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawRGB32::IsInitialized() const {
  return true;
}

void RawRGB32::Swap(RawRGB32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawRGB32::InternalSwap(RawRGB32* other) {
  data_.Swap(&other->data_);
  std::swap(shape_, other->shape_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawRGB32::GetMetadata() const {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawRGB32

// .org.beachc.deep_thought.common.Shape shape = 1;
bool RawRGB32::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void RawRGB32::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::org::beachc::deep_thought::common::Shape& RawRGB32::shape() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.RawRGB32.shape)
  return shape_ != NULL ? *shape_
                         : *::org::beachc::deep_thought::common::Shape::internal_default_instance();
}
::org::beachc::deep_thought::common::Shape* RawRGB32::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::org::beachc::deep_thought::common::Shape;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.RawRGB32.shape)
  return shape_;
}
::org::beachc::deep_thought::common::Shape* RawRGB32::release_shape() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.RawRGB32.shape)
  
  ::org::beachc::deep_thought::common::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void RawRGB32::set_allocated_shape(::org::beachc::deep_thought::common::Shape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.RawRGB32.shape)
}

// bytes data = 2;
void RawRGB32::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawRGB32::data() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.RawRGB32.data)
  return data_.GetNoArena();
}
void RawRGB32::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.beachc.deep_thought.RawRGB32.data)
}
#if LANG_CXX11
void RawRGB32::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.beachc.deep_thought.RawRGB32.data)
}
#endif
void RawRGB32::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.beachc.deep_thought.RawRGB32.data)
}
void RawRGB32::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.beachc.deep_thought.RawRGB32.data)
}
::std::string* RawRGB32::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.RawRGB32.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawRGB32::release_data() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.RawRGB32.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawRGB32::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.RawRGB32.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpriteList::kSpritesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpriteList::SpriteList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deep_5fthought_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.SpriteList)
}
SpriteList::SpriteList(const SpriteList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sprites_(from.sprites_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.SpriteList)
}

void SpriteList::SharedCtor() {
  _cached_size_ = 0;
}

SpriteList::~SpriteList() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.SpriteList)
  SharedDtor();
}

void SpriteList::SharedDtor() {
}

void SpriteList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpriteList::descriptor() {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpriteList& SpriteList::default_instance() {
  protobuf_deep_5fthought_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpriteList* SpriteList::New(::google::protobuf::Arena* arena) const {
  SpriteList* n = new SpriteList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpriteList::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.SpriteList)
  sprites_.Clear();
}

bool SpriteList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.SpriteList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.beachc.deep_thought.Sprite sprites = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sprites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.SpriteList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.SpriteList)
  return false;
#undef DO_
}

void SpriteList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.SpriteList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.beachc.deep_thought.Sprite sprites = 1;
  for (unsigned int i = 0, n = this->sprites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sprites(i), output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.SpriteList)
}

::google::protobuf::uint8* SpriteList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.SpriteList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.beachc.deep_thought.Sprite sprites = 1;
  for (unsigned int i = 0, n = this->sprites_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sprites(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.SpriteList)
  return target;
}

size_t SpriteList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.SpriteList)
  size_t total_size = 0;

  // repeated .org.beachc.deep_thought.Sprite sprites = 1;
  {
    unsigned int count = this->sprites_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sprites(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpriteList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.SpriteList)
  GOOGLE_DCHECK_NE(&from, this);
  const SpriteList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpriteList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.SpriteList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.SpriteList)
    MergeFrom(*source);
  }
}

void SpriteList::MergeFrom(const SpriteList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.SpriteList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sprites_.MergeFrom(from.sprites_);
}

void SpriteList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.SpriteList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteList::CopyFrom(const SpriteList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.SpriteList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteList::IsInitialized() const {
  return true;
}

void SpriteList::Swap(SpriteList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpriteList::InternalSwap(SpriteList* other) {
  sprites_.InternalSwap(&other->sprites_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpriteList::GetMetadata() const {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpriteList

// repeated .org.beachc.deep_thought.Sprite sprites = 1;
int SpriteList::sprites_size() const {
  return sprites_.size();
}
void SpriteList::clear_sprites() {
  sprites_.Clear();
}
const ::org::beachc::deep_thought::Sprite& SpriteList::sprites(int index) const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.SpriteList.sprites)
  return sprites_.Get(index);
}
::org::beachc::deep_thought::Sprite* SpriteList::mutable_sprites(int index) {
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.SpriteList.sprites)
  return sprites_.Mutable(index);
}
::org::beachc::deep_thought::Sprite* SpriteList::add_sprites() {
  // @@protoc_insertion_point(field_add:org.beachc.deep_thought.SpriteList.sprites)
  return sprites_.Add();
}
::google::protobuf::RepeatedPtrField< ::org::beachc::deep_thought::Sprite >*
SpriteList::mutable_sprites() {
  // @@protoc_insertion_point(field_mutable_list:org.beachc.deep_thought.SpriteList.sprites)
  return &sprites_;
}
const ::google::protobuf::RepeatedPtrField< ::org::beachc::deep_thought::Sprite >&
SpriteList::sprites() const {
  // @@protoc_insertion_point(field_list:org.beachc.deep_thought.SpriteList.sprites)
  return sprites_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sprite::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sprite::Sprite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deep_5fthought_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.Sprite)
}
Sprite::Sprite(const Sprite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::org::beachc::deep_thought::common::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.Sprite)
}

void Sprite::SharedCtor() {
  shape_ = NULL;
  _cached_size_ = 0;
}

Sprite::~Sprite() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.Sprite)
  SharedDtor();
}

void Sprite::SharedDtor() {
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void Sprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sprite::descriptor() {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sprite& Sprite::default_instance() {
  protobuf_deep_5fthought_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sprite* Sprite::New(::google::protobuf::Arena* arena) const {
  Sprite* n = new Sprite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sprite::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.Sprite)
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}

bool Sprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.Sprite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.beachc.deep_thought.common.Shape shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.Sprite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.Sprite)
  return false;
#undef DO_
}

void Sprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.Sprite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.common.Shape shape = 1;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.Sprite)
}

::google::protobuf::uint8* Sprite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.Sprite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.beachc.deep_thought.common.Shape shape = 1;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.Sprite)
  return target;
}

size_t Sprite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.Sprite)
  size_t total_size = 0;

  // .org.beachc.deep_thought.common.Shape shape = 1;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sprite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.Sprite)
  GOOGLE_DCHECK_NE(&from, this);
  const Sprite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sprite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.Sprite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.Sprite)
    MergeFrom(*source);
  }
}

void Sprite::MergeFrom(const Sprite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.Sprite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    mutable_shape()->::org::beachc::deep_thought::common::Shape::MergeFrom(from.shape());
  }
}

void Sprite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.Sprite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sprite::CopyFrom(const Sprite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.Sprite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sprite::IsInitialized() const {
  return true;
}

void Sprite::Swap(Sprite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sprite::InternalSwap(Sprite* other) {
  std::swap(shape_, other->shape_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sprite::GetMetadata() const {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sprite

// .org.beachc.deep_thought.common.Shape shape = 1;
bool Sprite::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void Sprite::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::org::beachc::deep_thought::common::Shape& Sprite::shape() const {
  // @@protoc_insertion_point(field_get:org.beachc.deep_thought.Sprite.shape)
  return shape_ != NULL ? *shape_
                         : *::org::beachc::deep_thought::common::Shape::internal_default_instance();
}
::org::beachc::deep_thought::common::Shape* Sprite::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::org::beachc::deep_thought::common::Shape;
  }
  // @@protoc_insertion_point(field_mutable:org.beachc.deep_thought.Sprite.shape)
  return shape_;
}
::org::beachc::deep_thought::common::Shape* Sprite::release_shape() {
  // @@protoc_insertion_point(field_release:org.beachc.deep_thought.Sprite.shape)
  
  ::org::beachc::deep_thought::common::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void Sprite::set_allocated_shape(::org::beachc::deep_thought::common::Shape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.beachc.deep_thought.Sprite.shape)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionGraph::RegionGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deep_5fthought_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.beachc.deep_thought.RegionGraph)
}
RegionGraph::RegionGraph(const RegionGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org.beachc.deep_thought.RegionGraph)
}

void RegionGraph::SharedCtor() {
  _cached_size_ = 0;
}

RegionGraph::~RegionGraph() {
  // @@protoc_insertion_point(destructor:org.beachc.deep_thought.RegionGraph)
  SharedDtor();
}

void RegionGraph::SharedDtor() {
}

void RegionGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionGraph::descriptor() {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionGraph& RegionGraph::default_instance() {
  protobuf_deep_5fthought_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionGraph* RegionGraph::New(::google::protobuf::Arena* arena) const {
  RegionGraph* n = new RegionGraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:org.beachc.deep_thought.RegionGraph)
}

bool RegionGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.beachc.deep_thought.RegionGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.beachc.deep_thought.RegionGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.beachc.deep_thought.RegionGraph)
  return false;
#undef DO_
}

void RegionGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.beachc.deep_thought.RegionGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:org.beachc.deep_thought.RegionGraph)
}

::google::protobuf::uint8* RegionGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.beachc.deep_thought.RegionGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:org.beachc.deep_thought.RegionGraph)
  return target;
}

size_t RegionGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.beachc.deep_thought.RegionGraph)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.beachc.deep_thought.RegionGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionGraph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.beachc.deep_thought.RegionGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.beachc.deep_thought.RegionGraph)
    MergeFrom(*source);
  }
}

void RegionGraph::MergeFrom(const RegionGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.beachc.deep_thought.RegionGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RegionGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.beachc.deep_thought.RegionGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionGraph::CopyFrom(const RegionGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.beachc.deep_thought.RegionGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionGraph::IsInitialized() const {
  return true;
}

void RegionGraph::Swap(RegionGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionGraph::InternalSwap(RegionGraph* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionGraph::GetMetadata() const {
  protobuf_deep_5fthought_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deep_5fthought_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionGraph

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace deep_thought
}  // namespace beachc
}  // namespace org

// @@protoc_insertion_point(global_scope)
