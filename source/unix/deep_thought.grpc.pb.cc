// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deep_thought.proto

#include "deep_thought.pb.h"
#include "deep_thought.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace org {
namespace beachc {
namespace deep_thought {

static const char* Emulator_method_names[] = {
  "/org.beachc.deep_thought.Emulator/initialize",
};

std::unique_ptr< Emulator::Stub> Emulator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Emulator::Stub> stub(new Emulator::Stub(channel));
  return stub;
}

Emulator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_initialize_(Emulator_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::org::beachc::deep_thought::MachineState, ::org::beachc::deep_thought::VideoFrame>* Emulator::Stub::initializeRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::org::beachc::deep_thought::MachineState, ::org::beachc::deep_thought::VideoFrame>(channel_.get(), rpcmethod_initialize_, context);
}

::grpc::ClientAsyncReaderWriter< ::org::beachc::deep_thought::MachineState, ::org::beachc::deep_thought::VideoFrame>* Emulator::Stub::AsyncinitializeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::org::beachc::deep_thought::MachineState, ::org::beachc::deep_thought::VideoFrame>(channel_.get(), cq, rpcmethod_initialize_, context, tag);
}

Emulator::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Emulator_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< Emulator::Service, ::org::beachc::deep_thought::MachineState, ::org::beachc::deep_thought::VideoFrame>(
          std::mem_fn(&Emulator::Service::initialize), this)));
}

Emulator::Service::~Service() {
}

::grpc::Status Emulator::Service::initialize(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::org::beachc::deep_thought::VideoFrame, ::org::beachc::deep_thought::MachineState>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace org
}  // namespace beachc
}  // namespace deep_thought

